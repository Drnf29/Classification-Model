# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Drnf29/619f7d97ec89883ed83e516bd4dd769d/classification.ipynb
"""

# Will use Artifical Intelligence to classify a entity entered
#into the dataset whether its' cancer is malignant or benign
#given past entities records data

#Import all libraries needed
import pandas as pd

dataset = pd.read_csv('cancer.csv')

# We are going to name the independent variables x, or in this case
# the tumour radius mean, texture, ect.

x = dataset.drop(columns=["diagnosis(1=m, 0=b)"])

#The depenendent variable, y, will be whether the tumour is cancerous
#or not

y = dataset["diagnosis(1=m, 0=b)"]

# Machine learning library to be able to split the data into two
# new sets. One will be used for our training data and the other
# to evaluate the algorithm because we want to make that it doesn't
#over fit the data

from sklearn.model_selection import train_test_split

#20% of the data will be in the testing set
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

#Builds a neural network model to be able to classify the data

import tensorflow as tf

model = tf.keras.models.Sequential()

#Creates a 'Dense' which is collection of nodes in the hidden layer.
#Plotting using sigmoid function because it will give a value between
#0 and 1 which will actually be our classification of the two possible
#outcomes
model.add(tf.keras.layers.Dense(256, input_shape=x_train.shape[1:], activation = 'sigmoid'))
model.add(tf.keras.layers.Dense(256, activation='sigmoid'))
#Creates an output layer
model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

# This optimises the model called 'adam' to be able to fine tune the
# weights and reach the best loss function for the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

#Epochs is just how many iterations of data it does
model.fit(x_train, y_train, epochs=400)

model.evaluate(x_test, y_test)